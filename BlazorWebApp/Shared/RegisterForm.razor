@using global::Shared.UserDTO
@using Client.Infrastructure
@using Blazored.LocalStorage

@inject HttpAuthorizationService _authorizationService
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authStateProvider

<div class="container">
    <div class="row mt-lg-n11 mt-md-n11 mt-n11 mb-n5">
        <div class="col-xl-4 col-lg-5 col-md-7 mx-auto">
            <div class="card z-index-0">
                <div class="card-header text-center pt-4 mb-n5">
                    <h5>Register</h5>
                </div>
                <div class="card-body">
                    <form role="form text-left">
                        <div class="mb-3">
                            <input type="text" @bind-value="@RegistrationDto.UserName" class="form-control" placeholder="Username" aria-label="Username">
                        </div>
                        <div class="mb-3">
                            <input type="email" @bind-value="@RegistrationDto.Email" class="form-control" placeholder="Email" aria-label="Email" aria-describedby="email-addon">
                        </div>
                        <div class="mb-3">
                            <input type="password" @bind-value="@RegistrationDto.Password" class="form-control" placeholder="Password" aria-label="Password" aria-describedby="password-addon">
                        </div>
                        @if (_isAuthenticationFailed)
                        {
                            <div class="alert alert-warning" role="alert">
                                <strong class="alert-text">Something went wrong!</strong> 
                                <p class="alert-text">Seems that user with such username or email already exists.</p>
                                <p class="alert-text">Or password isn't enough secure. Try to add <i>upper case, digit or symbol</i>.</p>
                            </div>
                        }
                        <div class="form-check form-check-info text-left">
                            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                            <label class="form-check-label" for="flexCheckDefault">
                                I agree the <a href="javascript:;" class="text-dark font-weight-bolder">Terms and Conditions</a>
                            </label>
                        </div>
                        <div class="text-center">
                            <button type="button" @onclick="SignUp" class="btn bg-gradient-dark w-100 my-4 mb-2">Sign up</button>
                        </div>
                        <p class="text-sm mt-3 mb-0">Already have an account? 
                            <NavLink href="signin"><span class="text-dark font-weight-bolder">Sign in</span></NavLink>
                        </p>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    UserRegistrationDTO RegistrationDto { get; set; }  = new ();
    private bool _isAuthenticationFailed = false;

    private async void SignUp()
    {
        try
        {
            var token = await _authorizationService.RegisterAsync(new UserRegistrationDTO
            {
                UserName = RegistrationDto.UserName,
                Email = RegistrationDto.Email,
                Password = RegistrationDto.Password
            });
            await _localStorageService.SetItemAsync("access_token", token);
            await _authStateProvider.GetAuthenticationStateAsync();
            _isAuthenticationFailed = false;
            _navigationManager.NavigateTo("/");
        }
        catch (Exception)
        {
            _isAuthenticationFailed = true;
            await _localStorageService.RemoveItemAsync("access_token");
        }
    }
}
